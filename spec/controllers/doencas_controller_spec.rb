require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DoencasController do

  # This should return the minimal set of attributes required to create a valid
  # Doenca. As you add validations to Doenca, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DoencasController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all doencas as @doencas" do
      doenca = Doenca.create! valid_attributes
      get :index, {}, valid_session
      assigns(:doencas).should eq([doenca])
    end
  end

  describe "GET show" do
    it "assigns the requested doenca as @doenca" do
      doenca = Doenca.create! valid_attributes
      get :show, {:id => doenca.to_param}, valid_session
      assigns(:doenca).should eq(doenca)
    end
  end

  describe "GET new" do
    it "assigns a new doenca as @doenca" do
      get :new, {}, valid_session
      assigns(:doenca).should be_a_new(Doenca)
    end
  end

  describe "GET edit" do
    it "assigns the requested doenca as @doenca" do
      doenca = Doenca.create! valid_attributes
      get :edit, {:id => doenca.to_param}, valid_session
      assigns(:doenca).should eq(doenca)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Doenca" do
        expect {
          post :create, {:doenca => valid_attributes}, valid_session
        }.to change(Doenca, :count).by(1)
      end

      it "assigns a newly created doenca as @doenca" do
        post :create, {:doenca => valid_attributes}, valid_session
        assigns(:doenca).should be_a(Doenca)
        assigns(:doenca).should be_persisted
      end

      it "redirects to the created doenca" do
        post :create, {:doenca => valid_attributes}, valid_session
        response.should redirect_to(Doenca.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved doenca as @doenca" do
        # Trigger the behavior that occurs when invalid params are submitted
        Doenca.any_instance.stub(:save).and_return(false)
        post :create, {:doenca => {}}, valid_session
        assigns(:doenca).should be_a_new(Doenca)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Doenca.any_instance.stub(:save).and_return(false)
        post :create, {:doenca => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested doenca" do
        doenca = Doenca.create! valid_attributes
        # Assuming there are no other doencas in the database, this
        # specifies that the Doenca created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Doenca.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => doenca.to_param, :doenca => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested doenca as @doenca" do
        doenca = Doenca.create! valid_attributes
        put :update, {:id => doenca.to_param, :doenca => valid_attributes}, valid_session
        assigns(:doenca).should eq(doenca)
      end

      it "redirects to the doenca" do
        doenca = Doenca.create! valid_attributes
        put :update, {:id => doenca.to_param, :doenca => valid_attributes}, valid_session
        response.should redirect_to(doenca)
      end
    end

    describe "with invalid params" do
      it "assigns the doenca as @doenca" do
        doenca = Doenca.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Doenca.any_instance.stub(:save).and_return(false)
        put :update, {:id => doenca.to_param, :doenca => {}}, valid_session
        assigns(:doenca).should eq(doenca)
      end

      it "re-renders the 'edit' template" do
        doenca = Doenca.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Doenca.any_instance.stub(:save).and_return(false)
        put :update, {:id => doenca.to_param, :doenca => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested doenca" do
      doenca = Doenca.create! valid_attributes
      expect {
        delete :destroy, {:id => doenca.to_param}, valid_session
      }.to change(Doenca, :count).by(-1)
    end

    it "redirects to the doencas list" do
      doenca = Doenca.create! valid_attributes
      delete :destroy, {:id => doenca.to_param}, valid_session
      response.should redirect_to(doencas_url)
    end
  end

end
